imp.23.ter.long$prop <- imp.23.ter.long$Count/imp.23.ter.long$sum
#Reorder and rename behavior levels
imp.23.ter.long$Behavior<-factor(imp.23.ter.long$Behavior, levels=c("foraging", "vigilant", "all.other"), labels= c("Foraging", "Vigilance", "Other"))
# Making plot for territorial herds
Figure.2 <- ggplot(data = imp.23.ter.long, aes(y = prop, x= interaction(impala.type, location), fill = Behavior)) +
geom_bar(position = "dodge", stat = "identity", alpha = .85) +
theme +
scale_fill_manual(values = c("#488650", "#4C0C0B", "#A0A0A0"))+
labs(y = "Proportion of time") +
theme(axis.title.x = element_text(size=12))+
xlab("Impala type & location") +
scale_x_discrete(limits= c( "female.wits.facility", "male.wits.facility", "juvenile.wits.facility", "female.kruger", "male.kruger"), labels=c("Female.WRF", "Male.WRF", "Juvenile.WRF", "Female.KNP", "Male.KNP"))
Figure.2
## Bachelor herds
# Need to convert everything to long format
imp.23.male.long <- imp.23.male.sum %>%
pivot_longer(
cols = c("foraging", "vigilant", "all.other"),
names_to = "Behavior",
values_to = "Count"
)
# Need to get total observations for each group to convert counts to proportions
imp.23.male.long <- imp.23.male.long %>%
group_by(location, herd.type) %>%
mutate(sum = sum(Count))
# Making a proportion column
imp.23.male.long$prop <- imp.23.male.long$Count/imp.23.male.long$sum
#Reoder and relavle behavior levels
imp.23.male.long$Behavior<-factor(imp.23.male.long$Behavior, levels=c("foraging", "vigilant", "all.other"), labels= c("Foraging", "Vigilance", "Other"))
# Making figure for males in territorial and bachelor herds
Figure.3 <- ggplot(data = imp.23.male.long, aes(y = prop, x= interaction(herd.type, location), fill = Behavior)) +
geom_bar(position = "dodge", stat = "identity", alpha = .85) +
theme +
scale_fill_manual(values = c("#488650", "#4C0C0B", "#A0A0A0"))+
#scale_fill_manual(values = c("#365977", "#C0772B", "#A0A0A0"))+
#scale_fill_manual(values = c("#C0532B", "#D5AB85", "#8C86A0"))+
labs(y = "Proportion of time") +
theme(axis.title.x = element_text(size=12))+
xlab("Herd type & location") +
scale_x_discrete(limits= c("territorial.wits.facility",  "bachelor.wits.facility", "territorial.kruger", "bachelor.kruger"), labels = c(  "Territorial.WRF","Bachelor.WRF", "Territorial.KNP","Bachelor.KNP"))
Figure.3
#ggsave("C:/Users/mwuen//Documents/R/Misc/Figure.1.png", Figure.1, units = "in", dpi = 300, width = 6.5, height = 3.5)
#ggsave("C:/Users/mwuen//Documents/R/Misc/Figure.2.png", Figure.2, units = "in", dpi = 300, width = 6.5, height = 3.5)
#ggsave("C:/Users/mwuen//Documents/R/Misc/Figure.3.png", Figure.3, units = "in", dpi = 300, width = 6.5, height = 3.5)
library(patchwork)
patchworkImpala=Figure.1+Figure.2+Figure.3 + plot_layout(ncol=1, nrow=3)
patchworkImpala+
plot_annotation(tag_levels = 'A') &
theme(plot.tag = element_text(size = 12, face="bold"))
#ggsave("C:/Users/mwuen//Documents/R/Misc/CombinedFigure.png", units=c("in"), width=6.5, height=8)
ggsave("C:/Users/mwuen//Documents/R/Misc/Figure.1.png", Figure.1, units = "in", dpi = 300, width = 6.5, height = 3.5)
ggsave("C:/Users/mwuen//Documents/R/Misc/Figure.2.png", Figure.2, units = "in", dpi = 300, width = 6.5, height = 3.5)
ggsave("C:/Users/mwuen//Documents/R/Misc/Figure.3.png", Figure.3, units = "in", dpi = 300, width = 6.5, height = 3.5)
# Filter for males
imp.23.male.sum <- imp.dat.23.sum %>%
filter(impala.type == "male")
# 2023 Bachelor - territorial code, Q2
chisq.test(imp.23.male.sum[,c(4:6)], correct = FALSE)
# 2023 Wits code, Q1
chisq.test(wits.23.ter.dat[,c(4:6)], correct = FALSE)
imp.23.male.sum
# 2023 Bachelor - territorial code, Q2
chisq.test(imp.23.male.sum[,c(4:6)], correct = FALSE)
wits.23.ter.dat
# Filter for males
imp.23.male.sum <- imp.dat.23.sum %>%
filter(impala.type == "male")
imp.23.male.long
imp.23.male.sum[c(1,3),c(4:6)]
imp.23.male.sum[c(1,2),c(4:6)]
# 2017 data summary and analysis
library(dplyr)
# Bring in datatframe
imp.dat.17 <- read.csv("C:/Users/mwuen/Documents/R/Misc/Impala/impala.data.17.csv")
imp.dat.17 <-  read.csv("~/Desktop/KSU_Research/South Africa/Impala/impala.data.17.csv")
# Convert to factor
imp.dat.17$location <- as.factor(imp.dat.17$location)
# 2017 data summary and analysis
library(dplyr)
# Bring in datatframe
imp.dat.17 <- read.csv("C:/Users/mwuen/Documents/R/Misc/Impala/impala.data.17.csv")
imp.dat.17 <-  read.csv("~/Desktop/KSU_Research/South Africa/Impala/impala.data.17.csv")
# Convert to factor
imp.dat.17$location <- as.factor(imp.dat.17$location)
imp.dat.17$impala.type <- as.factor(imp.dat.17$impala.type)
imp.dat.17$herd.type <- as.factor(imp.dat.17$herd.type)
str(imp.dat.17)
# Get summary of each behavior type for each location, herd type, and impala type for each behavior
imp.dat.17.sum <- imp.dat.17 %>%
group_by(location,herd.type,impala.type) %>%
summarise_if(is.integer, sum) %>%
ungroup()
imp.dat.17.sum
View(imp.dat.17.sum)
# Bring in datatframe
imp.dat.23 <- read.csv("C:/Users/mwuen/Documents/R/Misc/Impala/impala.data.23.csv")
imp.dat.23 <-  read.csv("~/Desktop/KSU_Research/South Africa/Impala/impala.data.23.csv")
# Convert to factor
imp.dat.23$location <- as.factor(imp.dat.23$location)
imp.dat.23$impala.type <- as.factor(imp.dat.23$impala.type)
imp.dat.23$herd.type <- as.factor(imp.dat.23$herd.type)
str(imp.dat.23)
# Get summary of each behavior type for each location, herd type, and impala type for each behavior
imp.dat.23.sum <- imp.dat.23 %>%
group_by(location,herd.type,impala.type) %>%
summarise_if(is.integer, sum) %>%
ungroup()
# remove juveniles in Kruger, students only gathered data from 2 individuals over short timespan. Also remove f/j from bachelor herds
imp.dat.23.sum<- imp.dat.23.sum[-c(1,2,5,7,8),]
View(imp.dat.23.sum)
library(dplyr)
# Meals, updated 2.1.2023
Feed.me <- read.csv("C:/Users/mwuen/Documents/R/Meals.2.1.23.csv")
# Subsetting dfs for meals and sides
Feed.me.meals <- Feed.me %>%
filter(Type == "Main")
Feed.me.sides <- Feed.me %>%
filter(Type == "Side")
# Making commands
dinner.time <- Feed.me.meals[sample(nrow(Feed.me.meals), 1), ]
give.me.options <- Feed.me.meals[sample(nrow(Feed.me.meals), 7), ]
and.a.side <- Feed.me.sides[sample(nrow(Feed.me.sides), 3), ]
dinner.time
give.me.options
and.a.side
# Making commands
dinner.time <- Feed.me.meals[sample(nrow(Feed.me.meals), 1), ]
give.me.options <- Feed.me.meals[sample(nrow(Feed.me.meals), 7), ]
and.a.side <- Feed.me.sides[sample(nrow(Feed.me.sides), 3), ]
dinner.time
# Subsetting dfs for meals and sides
Feed.me.meals <- Feed.me %>%
filter(Type == "Main")
Feed.me.sides <- Feed.me %>%
filter(Type == "Side")
# Making commands
dinner.time <- Feed.me.meals[sample(nrow(Feed.me.meals), 1), ]
give.me.options <- Feed.me.meals[sample(nrow(Feed.me.meals), 7), ]
and.a.side <- Feed.me.sides[sample(nrow(Feed.me.sides), 3), ]
dinner.time
give.me.options
dinner.time
give.me.options
# 2017 data summary and analysis
library(dplyr)
# Bring in datatframe
imp.dat.17 <- read.csv("C:/Users/mwuen/Documents/R/Misc/Impala/impala.data.17.csv")
imp.dat.17 <-  read.csv("~/Desktop/KSU_Research/South Africa/Impala/impala.data.17.csv")
# Convert to factor
imp.dat.17$location <- as.factor(imp.dat.17$location)
# 2017 data summary and analysis
library(dplyr)
# Bring in datatframe
imp.dat.17 <- read.csv("C:/Users/mwuen/Documents/R/Misc/Impala/impala.data.17.csv")
imp.dat.17 <-  read.csv("~/Desktop/KSU_Research/South Africa/Impala/impala.data.17.csv")
# Convert to factor
imp.dat.17$location <- as.factor(imp.dat.17$location)
imp.dat.17$impala.type <- as.factor(imp.dat.17$impala.type)
imp.dat.17$herd.type <- as.factor(imp.dat.17$herd.type)
str(imp.dat.17)
# Get summary of each behavior type for each location, herd type, and impala type for each behavior
imp.dat.17.sum <- imp.dat.17 %>%
group_by(location,herd.type,impala.type) %>%
summarise_if(is.integer, sum) %>%
ungroup()
# Analyses need to be Comparing between kruger and wits, T-males and B-males, and among members in territorial herds.
imp.dat.17 <- read.csv("2017_individual.csv")
imp.dat.17
# Making new column of non-foraging
imp.dat.17$non.forage <- imp.dat.17$vigilant + imp.dat.17$vigilant
imp.dat.17
# Making new column of non-foraging
imp.dat.17$non.forage <- imp.dat.17$vigilant + imp.dat.17$other
imp.dat.17
# Binomial regression
lmer(cbind(foraging,non.forage) ~ status, data = imp.dat.17, family = binomial())
set.seed(63)
library(dplyr)
library(lme4)
library(lmerTest)
library(emmeans)
# Binomial regression
lmer(cbind(foraging,non.forage) ~ status, data = imp.dat.17, family = binomial())
# Binomial regression
glmer(cbind(foraging,non.forage) ~ status, data = imp.dat.17, family = binomial())
# Binomial regression
glm(cbind(foraging,non.forage) ~ status, data = imp.dat.17, family = binomial())
# Binomial regression
test17 <- glm(cbind(foraging,non.forage) ~ status, data = imp.dat.17, family = binomial())
summary(test17)
car::Anova(test17)
# Binomial regression
test17 <- glmer(cbind(foraging,non.forage) ~ status + (1|sequence), data = imp.dat.17, family = binomial())
summary(test17)
car::Anova(test17)
emmeans(test17)
emmeans(test17, ~ status)
emmeans(test17, ~ status, type = "response")
emmeans(test17,pairwise ~ status, type = "response")
car::Anova(test17) # unsure if you'll use these p values or the emmeans ones. TAYLOR
imp.dat.17$non.vigilant <- imp.dat.17$foraging + imp.dat.17$other
test17.v <- glmer(cbind(vigilant,non.vigilant) ~ status + (1|sequence), data = imp.dat.17, family = binomial())
summary(test17.v)
car::Anova(test17.v) # unsure if you'll use these p values or the emmeans ones. TAYLOR
emmeans(test17.v,pairwise ~ status, type = "response")
imp.23 <- imp.dat.17 <- read.csv("2023_individual.csv")
<- read.csv("2023_individual.csv")
imp.23 <- read.csv("2023_individual.csv")
View(imp.23)
# Making new column of non-foraging
imp.23$non.forage <- imp.23$vigilant + imp.23$other
imp.23$non.vigilant <- imp.23$foraging + imp.23$other
# Binomial regression (can do this with or without random effect ultimately for this) #####
test23 <- glmer(cbind(foraging,non.forage) ~ status*herd.type*location + (1|sequence), data = imp.23, family = binomial())
# Binomial regression (can do this with or without random effect ultimately for this) #####
test23 <- glmer(cbind(foraging,non.forage) ~ status+ (1|sequence), data = imp.23, family = binomial())
# Binomial regression (can do this with or without random effect ultimately for this) #####
test23 <- glm(cbind(foraging,non.forage) ~ status*location*herd.type + data = imp.23, family = binomial())
# Binomial regression (can do this with or without random effect ultimately for this) #####
test23 <- glm(cbind(foraging,non.forage) ~ status*location*herd.type, data = imp.23, family = binomial())
summary(test23)
summary(imp.23)
which(is.na(imp.23$location))
which(is.na(imp.23$sequence))
which(is.na(imp.23$herd.type))
which(is.na(imp.23$status))
# 2023 analyses
imp.23 <- read.csv("2023_individual.csv")
summary(imp.23)
# Subset data for territorial comparisons
imp.23.ter <- imp.23 %>%
filter(herd.type == "territorial")
# Subset data for territorial comparisons
imp.23.ter <- imp.23 %>%
filter(herd.type == "territorial") %>%
droplevels()
# Binomial regression (can do this with or without random effect ultimately for this) #####
test23 <- glm(cbind(foraging,non.forage) ~ status*location, data = imp.23, family = binomial())
# Making new column of non-foraging
imp.23$non.forage <- imp.23$vigilant + imp.23$other
imp.23$non.vigilant <- imp.23$foraging + imp.23$other
# Subset data for territorial comparisons
imp.23.ter <- imp.23 %>%
filter(herd.type == "territorial") %>%
droplevels()
# Binomial regression (can do this with or without random effect ultimately for this) #####
test23 <- glm(cbind(foraging,non.forage) ~ status*location, data = imp.23, family = binomial())
summary(test23)
car::Anova(test17) # unsure if you'll use these p values or the emmeans ones. TAYLOR
car::Anova(test23) # unsure if you'll use these p values or the emmeans ones. TAYLOR
emmeans(test23,pairwise ~ status*location, type = "response")
# Binomial regression (can do this with or without random effect ultimately for this) #####
test23 <- glm(cbind(foraging,non.forage) ~ status*location, data = imp.23.ter, family = binomial())
summary(test23)
car::Anova(test23) # unsure if you'll use these p values or the emmeans ones. TAYLOR
emmeans(test23,pairwise ~ status*location, type = "response")
emmeans(test23,pairwise ~ location, type = "response")
# Binomial regression (can do this with or without random effect ultimately for this) #####
test23 <- glmer(cbind(foraging,non.forage) ~ status*location + (1|sequence), data = imp.23.ter, family = binomial())
summary(test23)
car::Anova(test23) # unsure if you'll use these p values or the emmeans ones. TAYLOR
emmeans(test23,pairwise ~ location, type = "response")
emmeans(test23,pairwise ~ location*status, type = "response")
emmeans(test23, ~ location*status, type = "response")
imp.23.ter
vignette("contrasts", "emmeans")
vignette("QuickStart", "emmeans")
? contrast
contrast(emm)
contrast(emm, location)
emm <- emmeans(test23, ~ location*status, type = "response")
contrast(emm, location)
contrast(emm)
contrast(emm, status)
emm
emm <- emmeans(test23, pairwise ~ location*status, type = "response")
emm
emm <- emmeans(test23,  ~ location | status, type = "response")
emm
emm <- emmeans(test23,  ~ location * status, type = "response")
# We have a 2x3 array
contrast(emm, method = "pairwise", by = location)
# We have a 2x3 array
contrast(emm, method = "pairwise", by = "location")
contrast(emm, method = "pairwise", by = "status")
# Summarise by groups, I believe juvenile sample size is REALLY low and needs dropped
sum23 <- imp.23 %>%
group_by(location, status) %>%
summarise(sum(total))
sum23
sum17 <- imp.17 %>%
group_by(status) %>%
summarise(sum(total))
sum17 <- imp.dat.17 %>%
group_by(status) %>%
summarise(sum(total))
sum17
sum17
imp.dat.17
# Analyses need to be Comparing between kruger and wits, T-males and B-males, and among members in territorial herds.
imp.dat.17 <- read.csv("2017_individual.csv")
sum17 <- imp.dat.17 %>%
group_by(status) %>%
summarise(sum(total))
sum17
id172 <- read.csv("impala.data.17.csv")
A <- imp.dat.17 %>%
group_by(status) %>%
summarise(sum(total))
B <- id172 %>%
group_by(status) %>%
summarise(sum(total))
id172
A <- imp.dat.17 %>%
group_by(impala.type) %>%
summarise(sum(total))
B <- id172 %>%
group_by(impala.type) %>%
summarise(sum(total))
id172$total <- id172$foraging + id172$vigilant + id172$all.other
A <- imp.dat.17 %>%
group_by(status) %>%
summarise(sum(total))
B <- id172 %>%
group_by(impala.type) %>%
summarise(sum(total))
A
B
A <- imp.dat.17 %>%
group_by(status) %>%
summarise(sum(foraging))
B <- id172 %>%
group_by(impala.type) %>%
summarise(sum(foraging))
A
B
A <- imp.dat.17 %>%
group_by(status) %>%
summarise(sum(vigilant))
B <- id172 %>%
group_by(impala.type) %>%
summarise(sum(vigilant))
A
B
A <- imp.dat.17 %>%
group_by(status) %>%
summarise(sum(other))
B <- id172 %>%
group_by(impala.type) %>%
summarise(sum(all.other))
A
B
A <- imp.dat.17 %>%
group_by(status) %>%
summarise(sum(total))
B <- id172 %>%
group_by(impala.type) %>%
summarise(sum(total))
A
B
A
# Summarise by groups, I believe juvenile sample size is REALLY low and needs dropped
sum23 <- imp.23 %>%
group_by(location, status) %>%
summarise(sum(total))
imp.23q <- imp.23 %>%
filter(location == "KNP" & status == "juvenile")
imp.23q
imp.23q <- imp.23 %>%
filter(!location == "KNP" & status == "juvenile")
imp.23q
imp.23q <- imp.23 %>%
filter(!location == "KNP" & !status == "juvenile")
imp.23q
# Summarise by groups, I believe juvenile sample size is REALLY low and needs dropped
sum23 <- imp.23q %>%
group_by(location, status) %>%
summarise(sum(total))
sum23
imp.23q <- imp.23 %>%
filter(!(location == "KNP" & status == "juvenile"))
imp.23q
# Summarise by groups, I believe juvenile sample size is REALLY low and needs dropped
sum23 <- imp.23 %>%
group_by(location, status) %>%
summarise(sum(total))
sum23
# Summarise by groups, I believe juvenile sample size is REALLY low and needs dropped
sum23 <- imp.23q %>%
group_by(location, status) %>%
summarise(sum(total))
sum23
# Subset data for males
imp.23.m <- imp.23 %>%
filter(status == "b.male" | status == "t.male") %>%
droplevels()
imp.23.m
# Binomial regression (can do this with or without random effect ultimately for this) #####
test23.m <- glmer(cbind(foraging,non.forage) ~ location*status + (1|sequence), data = imp.23.m, family = binomial())
summary(test23.m)
car::Anova(test23.m) # unsure if you'll use these p values or the emmeans ones. TAYLOR
emm <- emmeans(test23,  ~ location * status, type = "response")
emm
emm <- emmeans(test23.m,  ~ location * status, type = "response")
emm
# We have a 2x3 array
contrast(emm, method = "pairwise", by = "location")
contrast(emm, method = "pairwise", by = "status")
# Analyses need to be Comparing between kruger and wits, T-males and B-males, and among members in territorial herds.
imp.17 <- read.csv("2017_individual.csv")
# Making new column of non-foraging
imp.17$non.forage <- imp.17$vigilant + imp.17$other
imp.17$non.vigilant <- imp.17$foraging + imp.17$other
# Binomial regression (can do this with or without random effect ultimately for this) #####
bnom17.for <- glmer(cbind(foraging,non.forage) ~ status + (1|sequence), data = imp.17, family = binomial())
summary(bnom17.for)
car::Anova(bnom17.for) # unsure if you'll use these p values or the emmeans ones. TAYLOR
emmeans(bnom17.for,pairwise ~ status, type = "response")
bnom17.vig <- glmer(cbind(vigilant,non.vigilant) ~ status + (1|sequence), data = imp.17, family = binomial())
summary(bnom17.vig)
car::Anova(bnom17.vig) # unsure if you'll use these p values or the emmeans ones. TAYLOR
emmeans(bnom17.vig,pairwise ~ status, type = "response")
# 2023 analyses
imp.23 <- read.csv("2023_individual.csv")
summary(imp.23)
# 2023 analyses
imp.23 <- read.csv("2023_individual.csv")
# Making new column of non-foraging
imp.23$non.forage <- imp.23$vigilant + imp.23$other
imp.23$non.vigilant <- imp.23$foraging + imp.23$other
# Vigilance
bnom23.ter.vig <- glmer(cbind(vigilant,vigilant) ~ location*status + (1|sequence), data = imp.23.ter, family = binomial())
summary(bnom23.ter.vig)
# Vigilance
bnom23.ter.vig <- glmer(cbind(vigilant,vigilant) ~ location*status + (1|sequence), data = imp.23.ter, family = binomial())
# Binomial regression (can do this with or without random effect ultimately for this) #####
bnom23.ter.for <- glmer(cbind(foraging,non.forage) ~ location*status + (1|sequence), data = imp.23.ter, family = binomial())
imp.23.ter
# Vigilance
bnom23.ter.vig <- glmer(cbind(vigilant,vigilant) ~ location*status + (1|sequence), data = imp.23.ter, family = binomial())
# Vigilance
bnom23.ter.vig <- glmer(cbind(vigilant,non.vigilant) ~ location*status + (1|sequence), data = imp.23.ter, family = binomial())
# Vigilance
bnom23.ter.vig <- glmer(cbind(vigilant,non.vigilant) ~ location*status + (1|sequence), data = imp.23.ter, family = binomial())
summary(bnom23.ter.vig)
car::Anova(bnom23.ter.vig) # unsure if you'll use these p values or the emmeans ones. TAYLOR
em.bn23.ter.for <- emmeans(bnom23.ter.vig,  ~ location * status, type = "response")
# We have a 2x3 array
contrast(bnom23.ter.vig, method = "pairwise", by = "location")
# We have a 2x3 array
contrast(em.bn23.ter.vig, method = "pairwise", by = "location")
em.bn23.ter.vig <- emmeans(bnom23.ter.vig,  ~ location * status, type = "response")
# We have a 2x3 array
contrast(em.bn23.ter.vig, method = "pairwise", by = "location")
# Juveniles are low in KNP. drop em
imp.23 <- imp.23 %>%
filter(!(location == "KNP" & status == "juvenile"))
# Subset data for territorial comparisons
imp.23.ter <- imp.23 %>%
filter(herd.type == "territorial") %>%
droplevels()
# Binomial regression (can do this with or without random effect ultimately for this) #####
bnom23.ter.for <- glmer(cbind(foraging,non.forage) ~ location*status + (1|sequence), data = imp.23.ter, family = binomial())
summary(bnom23.ter.for)
car::Anova(bnom23.ter.for) # unsure if you'll use these p values or the emmeans ones. TAYLOR
em.bn23.ter.for <- emmeans(bnom23.ter.for,  ~ location * status, type = "response")
# We have a 2x3 array
contrast(em.bn23.ter.for, method = "pairwise", by = "location")
contrast(em.bn23.ter.for, method = "pairwise", by = "status")
# Vigilance
bnom23.ter.vig <- glmer(cbind(vigilant,non.vigilant) ~ location*status + (1|sequence), data = imp.23.ter, family = binomial())
summary(bnom23.ter.vig)
car::Anova(bnom23.ter.vig) # unsure if you'll use these p values or the emmeans ones. TAYLOR
em.bn23.ter.vig <- emmeans(bnom23.ter.vig,  ~ location * status, type = "response")
# We have a 2x3 array
contrast(em.bn23.ter.vig, method = "pairwise", by = "location")
# We have a 2x3 array
contrast(em.bn23.ter.for, method = "pairwise", by = "location")
# We have a 2x3 array
contrast(em.bn23.ter.vig, method = "pairwise", by = "location")
contrast(em.bn23.ter.vig, method = "pairwise", by = "status")
# Male analyses
# Subset data for males
imp.23.m <- imp.23 %>%
filter(status == "b.male" | status == "t.male") %>%
droplevels()
em.bn23.bac.for <- emmeans(test23.m,  ~ location * status, type = "response")
# Male analyses
# Subset data for males
imp.23.m <- imp.23 %>%
filter(status == "b.male" | status == "t.male") %>%
droplevels()
# Binomial regression (can do this with or without random effect ultimately for this) #####
bnom23.bac.for <- glmer(cbind(foraging,non.forage) ~ location*status + (1|sequence), data = imp.23.m, family = binomial())
summary(bnom23.bac.for)
car::Anova(bnom23.bac.for) # unsure if you'll use these p values or the emmeans ones. TAYLOR
em.bn23.bac.for <- emmeans(test23.m,  ~ location * status, type = "response")
# We have a 2x3 array
contrast(em.bn23.bac.for, method = "pairwise", by = "location")
contrast(em.bn23.bac.for, method = "pairwise", by = "status")
# Vigilance
bnom23.bac.vig <- glmer(cbind(vigilant,non.vigilant) ~ location*status + (1|sequence), data = imp.23.ter, family = binomial())
summary(bnom23.bac.vig)
# Vigilance
bnom23.bac.vig <- glmer(cbind(vigilant,non.vigilant) ~ location*status + (1|sequence), data = imp.23.m, family = binomial())
summary(bnom23.bac.vig)
car::Anova(bnom23.bac.vig) # unsure if you'll use these p values or the emmeans ones. TAYLOR
em.bn23.bac.vig <- emmeans(bnom23.bac.vig,  ~ location * status, type = "response")
# Contrasts for pairwise comparisons
contrast(em.bn23.bac.vig, method = "pairwise", by = "location")
contrast(em.bn23.bac.vig, method = "pairwise", by = "status")
em.bn23.bac.vig
